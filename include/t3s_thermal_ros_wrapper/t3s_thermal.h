// Generated by gencpp from file t3s_thermal_ros_wrapper/t3s_thermal.msg
// DO NOT EDIT!

#ifndef T3S_THERMAL_ROS_WRAPPER_MESSAGE_T3S_THERMAL_H
#define T3S_THERMAL_ROS_WRAPPER_MESSAGE_T3S_THERMAL_H

#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>
#include <ros/serialization.h>
#include <ros/types.h>
#include <std_msgs/Header.h>

#include <map>
#include <string>
#include <vector>

namespace t3s_thermal_ros_wrapper {
template <class ContainerAllocator>
struct t3s_thermal_ {
  typedef t3s_thermal_<ContainerAllocator> Type;

  t3s_thermal_()
      : header(),
        frame_num(0),
        timestamp_t3s_sec(0),
        timestamp_t3s_usec(0),
        image_width(0),
        image_height(0),
        temperaturedata() {}
  t3s_thermal_(const ContainerAllocator& _alloc)
      : header(_alloc),
        frame_num(0),
        timestamp_t3s_sec(0),
        timestamp_t3s_usec(0),
        image_width(0),
        image_height(0),
        temperaturedata(_alloc) {
    (void)_alloc;
  }

  typedef ::std_msgs::Header_<ContainerAllocator> _header_type;
  _header_type header;

  typedef int64_t _frame_num_type;
  _frame_num_type frame_num;

  typedef uint32_t _timestamp_t3s_sec_type;
  _timestamp_t3s_sec_type timestamp_t3s_sec;

  typedef uint32_t _timestamp_t3s_usec_type;
  _timestamp_t3s_usec_type timestamp_t3s_usec;

  typedef int8_t _image_width_type;
  _image_width_type image_width;

  typedef int8_t _image_height_type;
  _image_height_type image_height;

  typedef std::vector<
      float, typename ContainerAllocator::template rebind<float>::other>
      _temperaturedata_type;
  _temperaturedata_type temperaturedata;

  typedef boost::shared_ptr<
      ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator> >
      Ptr;
  typedef boost::shared_ptr<
      ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator> const>
      ConstPtr;

};  // struct t3s_thermal_

typedef ::t3s_thermal_ros_wrapper::t3s_thermal_<std::allocator<void> >
    t3s_thermal;

typedef boost::shared_ptr< ::t3s_thermal_ros_wrapper::t3s_thermal>
    t3s_thermalPtr;
typedef boost::shared_ptr< ::t3s_thermal_ros_wrapper::t3s_thermal const>
    t3s_thermalConstPtr;

// constants requiring out of line definition

template <typename ContainerAllocator>
std::ostream& operator<<(
    std::ostream& s,
    const ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator>& v) {
  ros::message_operations::Printer<
      ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator> >::stream(s,
                                                                            "",
                                                                            v);
  return s;
}

template <typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(
    const ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator1>& lhs,
    const ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator2>& rhs) {
  return lhs.header == rhs.header && lhs.frame_num == rhs.frame_num &&
         lhs.timestamp_t3s_sec == rhs.timestamp_t3s_sec &&
         lhs.timestamp_t3s_usec == rhs.timestamp_t3s_usec &&
         lhs.image_width == rhs.image_width &&
         lhs.image_height == rhs.image_height &&
         lhs.temperaturedata == rhs.temperaturedata;
}

template <typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(
    const ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator1>& lhs,
    const ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator2>& rhs) {
  return !(lhs == rhs);
}

}  // namespace t3s_thermal_ros_wrapper

namespace ros {
namespace message_traits {

template <class ContainerAllocator>
struct IsFixedSize<
    ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator> > : FalseType {
};

template <class ContainerAllocator>
struct IsFixedSize<
    ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator> const>
    : FalseType {};

template <class ContainerAllocator>
struct IsMessage< ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator> >
    : TrueType {};

template <class ContainerAllocator>
struct IsMessage<
    ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator> const>
    : TrueType {};

template <class ContainerAllocator>
struct HasHeader< ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator> >
    : TrueType {};

template <class ContainerAllocator>
struct HasHeader<
    ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator> const>
    : TrueType {};

template <class ContainerAllocator>
struct MD5Sum< ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator> > {
  static const char* value() { return "5441fb13ee281517df99efa7e149ae5a"; }

  static const char* value(
      const ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator>&) {
    return value();
  }
  static const uint64_t static_value1 = 0x5441fb13ee281517ULL;
  static const uint64_t static_value2 = 0xdf99efa7e149ae5aULL;
};

template <class ContainerAllocator>
struct DataType< ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator> > {
  static const char* value() { return "t3s_thermal_ros_wrapper/t3s_thermal"; }

  static const char* value(
      const ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator>&) {
    return value();
  }
};

template <class ContainerAllocator>
struct Definition<
    ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator> > {
  static const char* value() {
    return "Header header\n"
           "int64 frame_num\n"
           "uint32 timestamp_t3s_sec\n"
           "uint32 timestamp_t3s_usec\n"
           "int8 image_width\n"
           "int8 image_height\n"
           "float32[] temperaturedata\n"
           "==================================================================="
           "=============\n"
           "MSG: std_msgs/Header\n"
           "# Standard metadata for higher-level stamped data types.\n"
           "# This is generally used to communicate timestamped data \n"
           "# in a particular coordinate frame.\n"
           "# \n"
           "# sequence ID: consecutively increasing ID \n"
           "uint32 seq\n"
           "#Two-integer timestamp that is expressed as:\n"
           "# * stamp.sec: seconds (stamp_secs) since epoch (in Python the "
           "variable is called 'secs')\n"
           "# * stamp.nsec: nanoseconds since stamp_secs (in Python the "
           "variable is called 'nsecs')\n"
           "# time-handling sugar is provided by the client library\n"
           "time stamp\n"
           "#Frame this data is associated with\n"
           "string frame_id\n";
  }

  static const char* value(
      const ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator>&) {
    return value();
  }
};

}  // namespace message_traits
}  // namespace ros

namespace ros {
namespace serialization {

template <class ContainerAllocator>
struct Serializer<
    ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator> > {
  template <typename Stream, typename T>
  inline static void allInOne(Stream& stream, T m) {
    stream.next(m.header);
    stream.next(m.frame_num);
    stream.next(m.timestamp_t3s_sec);
    stream.next(m.timestamp_t3s_usec);
    stream.next(m.image_width);
    stream.next(m.image_height);
    stream.next(m.temperaturedata);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
};  // struct t3s_thermal_

}  // namespace serialization
}  // namespace ros

namespace ros {
namespace message_operations {

template <class ContainerAllocator>
struct Printer< ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator> > {
  template <typename Stream>
  static void stream(
      Stream& s, const std::string& indent,
      const ::t3s_thermal_ros_wrapper::t3s_thermal_<ContainerAllocator>& v) {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ",
                                                               v.header);
    s << indent << "frame_num: ";
    Printer<int64_t>::stream(s, indent + "  ", v.frame_num);
    s << indent << "timestamp_t3s_sec: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timestamp_t3s_sec);
    s << indent << "timestamp_t3s_usec: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timestamp_t3s_usec);
    s << indent << "image_width: ";
    Printer<int8_t>::stream(s, indent + "  ", v.image_width);
    s << indent << "image_height: ";
    Printer<int8_t>::stream(s, indent + "  ", v.image_height);
    s << indent << "temperaturedata[]" << std::endl;
    for (size_t i = 0; i < v.temperaturedata.size(); ++i) {
      s << indent << "  temperaturedata[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.temperaturedata[i]);
    }
  }
};

}  // namespace message_operations
}  // namespace ros

#endif  // T3S_THERMAL_ROS_WRAPPER_MESSAGE_T3S_THERMAL_H
